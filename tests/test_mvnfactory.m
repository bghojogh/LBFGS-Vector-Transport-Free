function test_suite = test_mvnfactory %#ok<STOUT>
initTestSuite;

function s = setup %#ok<*DEFNU>
% This is run before running each test case and the output is passed to the
% test case.

s.D = mvnfactory(2);

% theta generated by:  theta = D.randparam()
s.theta.mu = [0.537667139546100;1.833885014595087];
s.theta.sigma = [5.204000419608388,-2.364363071787154;-2.364363071787154,2.453391514648378];

s.theta2.mu = [-0.433592022305684;0.342624466538650];
s.theta2.sigma = [14.627119409443823,5.813341440927313;5.813341440927313,16.880541908989330];

s.theta3.mu = [0.725404224946106;-0.063054873189656];
s.theta3.sigma = [0.526269237763813,-0.331435574252895;-0.331435574252895,2.261210047696684];

% data generated by:  data = 1 + 3.*randn(2, 5)
s.data = [2.613001418638300,-5.776540583010944,1.956295719576942,-0.300776066917051,11.735190819177282;6.501655043785259,3.586519961104361,-2.923064888915820,2.027873399615950,9.308311089654632];


function test_dim(s)
assert(s.D.dim() == 5)


function test_datadim(s)
assert(s.D.datadim() == 2)


function test_ll(s)
ll = s.D.ll(s.theta, s.data);
assertElementsAlmostEqual(ll, -1.058850576468496e+02);


function test_llvec(s)
llvec = s.D.llvec(s.theta, s.data);
assertElementsAlmostEqual(llvec, [-14.649610162288262,-7.105596804674992,-9.147876992812703,-2.903547511258396,-72.078426175815250]);


function test_llgrad(s)
dll = s.D.llgrad(s.theta, s.data);
assertElementsAlmostEqual(dll.mu, [5.651149441800543;9.249742020431318]);
assertElementsAlmostEqual(dll.sigma, [23.311722254092626,34.660305247190394;34.660305247190390,52.724265261117620]);


function test_llgraddata(s)
dld = s.D.llgraddata(s.theta, s.data);
assertElementsAlmostEqual(dld, [-2.247091595288816,1.581020264209688,1.082130152392690,0.222699948509717,-6.289908211623824;-4.068127877846996,0.809276045050577,2.981790077538461,0.135549156071845,-9.108229421245204]);


function test_cdf(s)
y = s.D.cdf(s.theta, s.data);
assertElementsAlmostEqual(y, [0.817080457447099,3.344501072590159e-04,2.392202480087761e-05,0.088660198889823,0.999998628914836]);


function test_pdf(s)
y = s.D.pdf(s.theta, s.data);
assertElementsAlmostEqual(y, [4.342653160665077e-07,8.204998709838826e-04,1.064455476954083e-04,0.054828370383833,4.974360402301292e-32]);


function test_sample(s)
data = s.D.sample(s.theta);
assertEqual(size(data), [2,1]);

data = s.D.sample(s.theta, 5);
assertEqual(size(data), [2,5]);


function test_entropy(s)
h = s.D.entropy(s.theta);
assertElementsAlmostEqual(h, 3.823334362743222);


function test_kl(s)
kl = s.D.kl(s.theta, s.theta2);
assertElementsAlmostEqual(kl, 1.124418008189706);


%TODO
% function test_penalizer(s)
% [costP, gradP] = s.D.penalizer(s.theta, s.data);
% assertElementsAlmostEqual(costP, 0);
% assertElementsAlmostEqual(gradP.mu, 0);
% assertElementsAlmostEqual(gradP.sigma, 0);


function test_estimatedefault(s)
[theta, D] = s.D.estimatedefault(s.data);
ll = D.ll(theta, s.data);
assertElementsAlmostEqual(theta.mu, [2.045434261492906;3.700258921048877]); % Note: there is not enough samples in the data for an accurate estimation
assertElementsAlmostEqual(theta.sigma, [32.181890735580190,12.266893120811222;12.266893120811222,17.195259507447833]);
assertElementsAlmostEqual(ll, -29.186101942973160);


function test_init(s)
theta = s.D.init(s.data);
assertEqual(size(theta.mu), [2,1]);
assertEqual(size(theta.sigma), [2,2]);


function test_randparam(s)
theta = s.D.randparam();
assertEqual(size(theta.mu), [2,1]);
assertEqual(size(theta.sigma), [2,2]);


function test_sumparam(s)
theta = s.D.sumparam(s.theta, s.theta2);
assertElementsAlmostEqual(theta.mu, [0.104075117240416;2.176509481133737]);
assertElementsAlmostEqual(theta.sigma, [19.831119829052213,3.448978369140159;3.448978369140159,19.333933423637706]);


function test_scaleparam(s)
theta = s.D.scaleparam(-1, s.theta);
assertElementsAlmostEqual(theta.mu, [-0.537667139546100;-1.833885014595087]);
assertElementsAlmostEqual(theta.sigma, [-5.204000419608388,2.364363071787154;2.364363071787154,-2.453391514648378]);


function test_sumgrad(s)
grad1 = s.D.M.egrad2rgrad(s.theta, s.theta2);
grad2 = s.D.M.egrad2rgrad(s.theta, s.theta3);
grad = s.D.sumgrad(grad1, grad2, s.theta);
assertElementsAlmostEqual(grad.mu, [0.291812202640422;0.279569593348994]);
assertElementsAlmostEqual(grad.sigma, [3.824844393214097e+02,-1.968502504178134e+02;-1.968502504178134e+02,1.363294845027144e+02]);


function test_scalegrad(s)
grad1 = s.D.M.egrad2rgrad(s.theta, s.theta2);
grad = s.D.scalegrad(-1, grad1, s.theta);
assertElementsAlmostEqual(grad.mu, [0.433592022305684;-0.342624466538650]);
assertElementsAlmostEqual(grad.sigma, [-3.474355067403687e+02,1.711739541274122e+02;1.711739541274122e+02,-1.159318882731736e+02]);



