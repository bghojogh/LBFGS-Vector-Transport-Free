function test_suite = test_gammafactory %#ok<STOUT>
initTestSuite;

function s = setup %#ok<*DEFNU>
% This is run before running each test case and the output is passed to the
% test case.

s.D = gammafactory();

% theta generated by:  theta = D.randparam()
s.theta.a = 0.126986816293506;
s.theta.b = 0.913375856139019;

s.data = [1.497830834908086,2.796958291914378,2.522995379571841,1.007626829964108,2.105402194927377,2.693305810936257,8.214190476877166,4.446194259124519,1.809377887295079,1.597663593258299];


function test_dim(s)
assert(s.D.dim() == 2)


function test_datadim(s)
assert(s.D.datadim() == 1)


function test_ll(s)
ll = s.D.ll(s.theta, s.data);


function test_llvec(s)
llvec = s.D.llvec(s.theta, s.data);


function test_llgrad(s)
dll = s.D.llgrad(s.theta, s.data);


%TODO
% function test_llgraddata(s)
% dld = s.D.llgraddata(s.theta, s.data);


function test_cdf(s)
y = s.D.cdf(s.theta, s.data);


function test_pdf(s)
y = s.D.pdf(s.theta, s.data);


function test_sample(s)
data = s.D.sample(s.theta);

data = s.D.sample(s.theta, 5);


function test_entropy(s)
h = s.D.entropy(s.theta);


function test_kl(s)
kl = s.D.kl(s.theta, s.theta);


%TODO
% function test_penalizer(s)
% [costP, gradP] = s.D.penalizer(s.theta, s.data);


function test_estimatedefault(s)
theta = s.D.estimatedefault(s.data);


function test_init(s)
theta = s.D.init(s.data);


function test_randparam(s)
theta = s.D.randparam();


function test_sumparam(s)
theta = s.D.sumparam(s.theta, s.theta);


function test_scaleparam(s)
theta = s.D.scaleparam(-1, s.theta);


function test_sumgrad(s)
grad1 = s.D.M.egrad2rgrad(s.theta, s.theta);
grad = s.D.sumgrad(grad1, grad1, s.theta);


function test_scalegrad(s)
grad1 = s.D.M.egrad2rgrad(s.theta, s.theta);
grad = s.D.scalegrad(-1, grad1, s.theta);


function test_fixing(s)
% test fixate
newD = s.D.fixate('b', 3);
assert(newD.dim() == 1)
assert(s.D.dim() == 2)
% test fullparam
theta = newD.randparam();
fulltheta = newD.fullparam(theta);
assert(fulltheta.b == 3)
% test unfix
newD = newD.unfix('b');
assert(newD.dim() == 2)


